# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rain_unity/Hand_orion.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class Hand_orion(genpy.Message):
  _md5sum = "70f41cb3af7827caf205ea4ae0ba2ae6"
  _type = "rain_unity/Hand_orion"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header

# A unique ID assigned to this Hand object
int32 lmc_hand_id

# This changed to between true/false depending if there's a hand detected in the LMC frame
bool is_present

# This changed to between true/false depending if there's a hand detected in the LMC frame
bool valid_gestures

# The duration of time this Hand has been visible to the Leap Motion Controller. 
float32 time_visible

# How confident we are with a given hand pose. 
# The confidence level ranges between 0.0 and 1.0 inclusive.
float32 confidence

# The following three angles are in radians!
float32 roll
float32 pitch
float32 yaw

# The angle between the fingers and the hand of a grab hand pose. 
# In radians
float32 grab_strength

# The distance between the thumb and index finger of a pinch hand pose. 
float32 pinch_strength

# The rate of change of the palm position in meters/second. 
float32[] palm_velocity

# The center position of the palm in millimeters from the Leap Motion Controller origin. 
geometry_msgs/Point palm_center

# The estimated width of the palm when the hand is in a flat position. 
float32 palm_width

# The radius (m) of a sphere fit to the curvature of this hand. 
float32 sphere_radius

# The center of a sphere fit to the curvature of this hand. 
float32[] sphere_center

# The position of the wrist of this hand. 
float32[] wrist_position

# A string containing a brief, human readable description of the Hand object. 
string to_string 

# (Newly added from "Hand.msg") 
# The normal vector of the palm (w.r.t. the coordination of the global frame in VR). 
geometry_msgs/Vector3 palm_normal 

# The direction vector of the palm (w.r.t. the coordination of the global frame in VR). 
geometry_msgs/Vector3 palm_direction 


# A list of fingers and gestures assosciated with this hand (Commented for RAIN demonstration)
# Finger[] finger_list
# Gesture[] gesture_list
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z"""
  __slots__ = ['header','lmc_hand_id','is_present','valid_gestures','time_visible','confidence','roll','pitch','yaw','grab_strength','pinch_strength','palm_velocity','palm_center','palm_width','sphere_radius','sphere_center','wrist_position','to_string','palm_normal','palm_direction']
  _slot_types = ['std_msgs/Header','int32','bool','bool','float32','float32','float32','float32','float32','float32','float32','float32[]','geometry_msgs/Point','float32','float32','float32[]','float32[]','string','geometry_msgs/Vector3','geometry_msgs/Vector3']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,lmc_hand_id,is_present,valid_gestures,time_visible,confidence,roll,pitch,yaw,grab_strength,pinch_strength,palm_velocity,palm_center,palm_width,sphere_radius,sphere_center,wrist_position,to_string,palm_normal,palm_direction

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Hand_orion, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.lmc_hand_id is None:
        self.lmc_hand_id = 0
      if self.is_present is None:
        self.is_present = False
      if self.valid_gestures is None:
        self.valid_gestures = False
      if self.time_visible is None:
        self.time_visible = 0.
      if self.confidence is None:
        self.confidence = 0.
      if self.roll is None:
        self.roll = 0.
      if self.pitch is None:
        self.pitch = 0.
      if self.yaw is None:
        self.yaw = 0.
      if self.grab_strength is None:
        self.grab_strength = 0.
      if self.pinch_strength is None:
        self.pinch_strength = 0.
      if self.palm_velocity is None:
        self.palm_velocity = []
      if self.palm_center is None:
        self.palm_center = geometry_msgs.msg.Point()
      if self.palm_width is None:
        self.palm_width = 0.
      if self.sphere_radius is None:
        self.sphere_radius = 0.
      if self.sphere_center is None:
        self.sphere_center = []
      if self.wrist_position is None:
        self.wrist_position = []
      if self.to_string is None:
        self.to_string = ''
      if self.palm_normal is None:
        self.palm_normal = geometry_msgs.msg.Vector3()
      if self.palm_direction is None:
        self.palm_direction = geometry_msgs.msg.Vector3()
    else:
      self.header = std_msgs.msg.Header()
      self.lmc_hand_id = 0
      self.is_present = False
      self.valid_gestures = False
      self.time_visible = 0.
      self.confidence = 0.
      self.roll = 0.
      self.pitch = 0.
      self.yaw = 0.
      self.grab_strength = 0.
      self.pinch_strength = 0.
      self.palm_velocity = []
      self.palm_center = geometry_msgs.msg.Point()
      self.palm_width = 0.
      self.sphere_radius = 0.
      self.sphere_center = []
      self.wrist_position = []
      self.to_string = ''
      self.palm_normal = geometry_msgs.msg.Vector3()
      self.palm_direction = geometry_msgs.msg.Vector3()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_i2B7f().pack(_x.lmc_hand_id, _x.is_present, _x.valid_gestures, _x.time_visible, _x.confidence, _x.roll, _x.pitch, _x.yaw, _x.grab_strength, _x.pinch_strength))
      length = len(self.palm_velocity)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.palm_velocity))
      _x = self
      buff.write(_get_struct_3d2f().pack(_x.palm_center.x, _x.palm_center.y, _x.palm_center.z, _x.palm_width, _x.sphere_radius))
      length = len(self.sphere_center)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.sphere_center))
      length = len(self.wrist_position)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.wrist_position))
      _x = self.to_string
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_6d().pack(_x.palm_normal.x, _x.palm_normal.y, _x.palm_normal.z, _x.palm_direction.x, _x.palm_direction.y, _x.palm_direction.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.palm_center is None:
        self.palm_center = geometry_msgs.msg.Point()
      if self.palm_normal is None:
        self.palm_normal = geometry_msgs.msg.Vector3()
      if self.palm_direction is None:
        self.palm_direction = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 34
      (_x.lmc_hand_id, _x.is_present, _x.valid_gestures, _x.time_visible, _x.confidence, _x.roll, _x.pitch, _x.yaw, _x.grab_strength, _x.pinch_strength,) = _get_struct_i2B7f().unpack(str[start:end])
      self.is_present = bool(self.is_present)
      self.valid_gestures = bool(self.valid_gestures)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.palm_velocity = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 32
      (_x.palm_center.x, _x.palm_center.y, _x.palm_center.z, _x.palm_width, _x.sphere_radius,) = _get_struct_3d2f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.sphere_center = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.wrist_position = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.to_string = str[start:end].decode('utf-8')
      else:
        self.to_string = str[start:end]
      _x = self
      start = end
      end += 48
      (_x.palm_normal.x, _x.palm_normal.y, _x.palm_normal.z, _x.palm_direction.x, _x.palm_direction.y, _x.palm_direction.z,) = _get_struct_6d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_i2B7f().pack(_x.lmc_hand_id, _x.is_present, _x.valid_gestures, _x.time_visible, _x.confidence, _x.roll, _x.pitch, _x.yaw, _x.grab_strength, _x.pinch_strength))
      length = len(self.palm_velocity)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.palm_velocity.tostring())
      _x = self
      buff.write(_get_struct_3d2f().pack(_x.palm_center.x, _x.palm_center.y, _x.palm_center.z, _x.palm_width, _x.sphere_radius))
      length = len(self.sphere_center)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.sphere_center.tostring())
      length = len(self.wrist_position)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.wrist_position.tostring())
      _x = self.to_string
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_6d().pack(_x.palm_normal.x, _x.palm_normal.y, _x.palm_normal.z, _x.palm_direction.x, _x.palm_direction.y, _x.palm_direction.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.palm_center is None:
        self.palm_center = geometry_msgs.msg.Point()
      if self.palm_normal is None:
        self.palm_normal = geometry_msgs.msg.Vector3()
      if self.palm_direction is None:
        self.palm_direction = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 34
      (_x.lmc_hand_id, _x.is_present, _x.valid_gestures, _x.time_visible, _x.confidence, _x.roll, _x.pitch, _x.yaw, _x.grab_strength, _x.pinch_strength,) = _get_struct_i2B7f().unpack(str[start:end])
      self.is_present = bool(self.is_present)
      self.valid_gestures = bool(self.valid_gestures)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.palm_velocity = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      _x = self
      start = end
      end += 32
      (_x.palm_center.x, _x.palm_center.y, _x.palm_center.z, _x.palm_width, _x.sphere_radius,) = _get_struct_3d2f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.sphere_center = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.wrist_position = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.to_string = str[start:end].decode('utf-8')
      else:
        self.to_string = str[start:end]
      _x = self
      start = end
      end += 48
      (_x.palm_normal.x, _x.palm_normal.y, _x.palm_normal.z, _x.palm_direction.x, _x.palm_direction.y, _x.palm_direction.z,) = _get_struct_6d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d2f = None
def _get_struct_3d2f():
    global _struct_3d2f
    if _struct_3d2f is None:
        _struct_3d2f = struct.Struct("<3d2f")
    return _struct_3d2f
_struct_6d = None
def _get_struct_6d():
    global _struct_6d
    if _struct_6d is None:
        _struct_6d = struct.Struct("<6d")
    return _struct_6d
_struct_i2B7f = None
def _get_struct_i2B7f():
    global _struct_i2B7f
    if _struct_i2B7f is None:
        _struct_i2B7f = struct.Struct("<i2B7f")
    return _struct_i2B7f
