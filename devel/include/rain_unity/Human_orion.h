// Generated by gencpp from file rain_unity/Human_orion.msg
// DO NOT EDIT!


#ifndef RAIN_UNITY_MESSAGE_HUMAN_ORION_H
#define RAIN_UNITY_MESSAGE_HUMAN_ORION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <rain_unity/Hand_orion.h>
#include <rain_unity/Hand_orion.h>

namespace rain_unity
{
template <class ContainerAllocator>
struct Human_orion_
{
  typedef Human_orion_<ContainerAllocator> Type;

  Human_orion_()
    : header()
    , lmc_frame_id(0)
    , nr_of_hands(0)
    , nr_of_fingers(0)
    , nr_of_gestures(0)
    , current_frames_per_second(0.0)
    , to_string()
    , right_hand()
    , left_hand()  {
    }
  Human_orion_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , lmc_frame_id(0)
    , nr_of_hands(0)
    , nr_of_fingers(0)
    , nr_of_gestures(0)
    , current_frames_per_second(0.0)
    , to_string(_alloc)
    , right_hand(_alloc)
    , left_hand(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int32_t _lmc_frame_id_type;
  _lmc_frame_id_type lmc_frame_id;

   typedef int32_t _nr_of_hands_type;
  _nr_of_hands_type nr_of_hands;

   typedef int32_t _nr_of_fingers_type;
  _nr_of_fingers_type nr_of_fingers;

   typedef int32_t _nr_of_gestures_type;
  _nr_of_gestures_type nr_of_gestures;

   typedef float _current_frames_per_second_type;
  _current_frames_per_second_type current_frames_per_second;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _to_string_type;
  _to_string_type to_string;

   typedef  ::rain_unity::Hand_orion_<ContainerAllocator>  _right_hand_type;
  _right_hand_type right_hand;

   typedef  ::rain_unity::Hand_orion_<ContainerAllocator>  _left_hand_type;
  _left_hand_type left_hand;





  typedef boost::shared_ptr< ::rain_unity::Human_orion_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rain_unity::Human_orion_<ContainerAllocator> const> ConstPtr;

}; // struct Human_orion_

typedef ::rain_unity::Human_orion_<std::allocator<void> > Human_orion;

typedef boost::shared_ptr< ::rain_unity::Human_orion > Human_orionPtr;
typedef boost::shared_ptr< ::rain_unity::Human_orion const> Human_orionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rain_unity::Human_orion_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rain_unity::Human_orion_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rain_unity::Human_orion_<ContainerAllocator1> & lhs, const ::rain_unity::Human_orion_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.lmc_frame_id == rhs.lmc_frame_id &&
    lhs.nr_of_hands == rhs.nr_of_hands &&
    lhs.nr_of_fingers == rhs.nr_of_fingers &&
    lhs.nr_of_gestures == rhs.nr_of_gestures &&
    lhs.current_frames_per_second == rhs.current_frames_per_second &&
    lhs.to_string == rhs.to_string &&
    lhs.right_hand == rhs.right_hand &&
    lhs.left_hand == rhs.left_hand;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rain_unity::Human_orion_<ContainerAllocator1> & lhs, const ::rain_unity::Human_orion_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rain_unity

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::rain_unity::Human_orion_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rain_unity::Human_orion_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rain_unity::Human_orion_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rain_unity::Human_orion_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rain_unity::Human_orion_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rain_unity::Human_orion_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rain_unity::Human_orion_<ContainerAllocator> >
{
  static const char* value()
  {
    return "68d6ddc9f4bdf28d17d047e58c8d08d8";
  }

  static const char* value(const ::rain_unity::Human_orion_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x68d6ddc9f4bdf28dULL;
  static const uint64_t static_value2 = 0x17d047e58c8d08d8ULL;
};

template<class ContainerAllocator>
struct DataType< ::rain_unity::Human_orion_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rain_unity/Human_orion";
  }

  static const char* value(const ::rain_unity::Human_orion_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rain_unity::Human_orion_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"\n"
"# A unique ID for this Frame.\n"
"int32 lmc_frame_id\n"
"\n"
"# How many hands were detected in the frame\n"
"int32 nr_of_hands\n"
"\n"
"# How many fingers were detected in the frame\n"
"int32 nr_of_fingers\n"
"\n"
"# How many gestures were detected in the frame\n"
"int32 nr_of_gestures\n"
"\n"
"# The rate at which the Leap Motion software is providing frames of data (in frames per second). \n"
"float32 current_frames_per_second\n"
"\n"
"# A string containing a brief, human readable description of the Frame object. \n"
"string to_string\n"
"\n"
"# If there were any hands detected in the frame then the \n"
"# hand.msg will be added here\n"
"Hand_orion right_hand\n"
"Hand_orion left_hand\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: rain_unity/Hand_orion\n"
"std_msgs/Header header\n"
"\n"
"# A unique ID assigned to this Hand object\n"
"int32 lmc_hand_id\n"
"\n"
"# This changed to between true/false depending if there's a hand detected in the LMC frame\n"
"bool is_present\n"
"\n"
"# This changed to between true/false depending if there's a hand detected in the LMC frame\n"
"bool valid_gestures\n"
"\n"
"# The duration of time this Hand has been visible to the Leap Motion Controller. \n"
"float32 time_visible\n"
"\n"
"# How confident we are with a given hand pose. \n"
"# The confidence level ranges between 0.0 and 1.0 inclusive.\n"
"float32 confidence\n"
"\n"
"# The following three angles are in radians!\n"
"float32 roll\n"
"float32 pitch\n"
"float32 yaw\n"
"\n"
"# The angle between the fingers and the hand of a grab hand pose. \n"
"# In radians\n"
"float32 grab_strength\n"
"\n"
"# The distance between the thumb and index finger of a pinch hand pose. \n"
"float32 pinch_strength\n"
"\n"
"# The rate of change of the palm position in meters/second. \n"
"float32[] palm_velocity\n"
"\n"
"# The center position of the palm in millimeters from the Leap Motion Controller origin. \n"
"geometry_msgs/Point palm_center\n"
"\n"
"# The estimated width of the palm when the hand is in a flat position. \n"
"float32 palm_width\n"
"\n"
"# The radius (m) of a sphere fit to the curvature of this hand. \n"
"float32 sphere_radius\n"
"\n"
"# The center of a sphere fit to the curvature of this hand. \n"
"float32[] sphere_center\n"
"\n"
"# The position of the wrist of this hand. \n"
"float32[] wrist_position\n"
"\n"
"# A string containing a brief, human readable description of the Hand object. \n"
"string to_string \n"
"\n"
"# (Newly added from \"Hand.msg\") \n"
"# The normal vector of the palm (w.r.t. the coordination of the global frame in VR). \n"
"geometry_msgs/Vector3 palm_normal \n"
"\n"
"# The direction vector of the palm (w.r.t. the coordination of the global frame in VR). \n"
"geometry_msgs/Vector3 palm_direction \n"
"\n"
"\n"
"# A list of fingers and gestures assosciated with this hand (Commented for RAIN demonstration)\n"
"# Finger[] finger_list\n"
"# Gesture[] gesture_list\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::rain_unity::Human_orion_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rain_unity::Human_orion_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.lmc_frame_id);
      stream.next(m.nr_of_hands);
      stream.next(m.nr_of_fingers);
      stream.next(m.nr_of_gestures);
      stream.next(m.current_frames_per_second);
      stream.next(m.to_string);
      stream.next(m.right_hand);
      stream.next(m.left_hand);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Human_orion_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rain_unity::Human_orion_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rain_unity::Human_orion_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "lmc_frame_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.lmc_frame_id);
    s << indent << "nr_of_hands: ";
    Printer<int32_t>::stream(s, indent + "  ", v.nr_of_hands);
    s << indent << "nr_of_fingers: ";
    Printer<int32_t>::stream(s, indent + "  ", v.nr_of_fingers);
    s << indent << "nr_of_gestures: ";
    Printer<int32_t>::stream(s, indent + "  ", v.nr_of_gestures);
    s << indent << "current_frames_per_second: ";
    Printer<float>::stream(s, indent + "  ", v.current_frames_per_second);
    s << indent << "to_string: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.to_string);
    s << indent << "right_hand: ";
    s << std::endl;
    Printer< ::rain_unity::Hand_orion_<ContainerAllocator> >::stream(s, indent + "  ", v.right_hand);
    s << indent << "left_hand: ";
    s << std::endl;
    Printer< ::rain_unity::Hand_orion_<ContainerAllocator> >::stream(s, indent + "  ", v.left_hand);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RAIN_UNITY_MESSAGE_HUMAN_ORION_H
